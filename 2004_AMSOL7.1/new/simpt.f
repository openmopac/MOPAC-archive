      SUBROUTINE SIMPT(ENERGY)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      INCLUDE 'KEYS.i'
      INCLUDE 'SIZES.i'
      INCLUDE 'FFILES.i'
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     SIMPT LOCATES A SIMPLE TRANSITION STATE.  THE TRANSITION STATE
C     MUST BE WELL CHARACTERIZED BY A SINGLE BOND LENGTH.  SIMPT IS
C     SPECIFIED BY THE USER WITH THE KEYWORD 'SIMPT=X' WHERE X IS THE
C     XTH ATOM AND IS THE BOND LENGTH THAT THE TRANSITION STATE
C     LIES ON.  IF X IS POSITIVE, SIMPT SEARCHES FOR A TS WITH A LONGER
C     BOND LENGTH THAN INPUT, IF X IS NEGATIVE, SIMPT SEARCHES FOR A TS
C     WITH A SHORTER BOND LENGTH THAN INPUT.  THE BOND LENGTH IN QUESTION
C     !!!!!SHOULD NOT!!!!! BE FLAGGED FOR OPTIMIZATION.
C
C     THE SEARCH IS DONE IN THE FOLLOWING MANNER :
C       1) A SINGLE POINTS ARE DONE AT THE INITIAL GEOMETRY, 0.05 ANGSTROMS
C            AWAY, AND 0.2 ANGSTROMS AWAY FROM THE INITIAL GEOMETRY
C
C       2) A PARABOLA IS FIT TO THE THREE ENERGIES, AND THE GEOMETRY OF
C          THE TRANSITION STATE IS PREDICTED (WITH BOND LENGTH CHANGE OF
C          TDIST FROM THE INITIAL GEOMETRY).
C
C       3) CHANGE BOND LENGTH BY 0.5*TDIST AND OPTIMIZE AT A LOOSE
C          GRADIENT TOLERENCE.
C
C       4) CALCULATE THREE SINGLE POINTS A NEW GEOMETRY, NEW GEO +
C          0.5*TDIST AND NEW GEO + TDIST.
C 
C       5) CALCULATE NEW VALUE OF TDIST USING PARABOLA METHOD.  IF 
C          TDIST(NEW)/TDIST(OLD) > 0.65, REPEAT STEPS 3-5.
C
C       6) CHANGE BOND LENGTH BY TDIST.  OPTIMIZE USING TIGHTER 
C          GRADIENT TOLERENCE (STILL LOOSER THAN FINAL).
C
C       7) CALCULATE 3 SINGLE POINTS A NEW GEOMETRY, NEW GEO + 0.5*TDIST
C          AND NEW GEO - 0.5*TDIST
C
C       8) CALCULATE NEW TDIST USING PARABOLA METHOD.  IF TDIST > 0.01
C          ANGSTROMS, REPEAT STEPS 6-8.
C
C       9) CHANGE GEOMETRY BY TDIST.  OPTIMIZE USING FINAL GRADIENT CRITERIA
C
C      10) CALCULATE 3 SINGLE POINTS AT NEW GEO, NEW GEO + 0.01 ANGSTROMS
C          AND NEW GEO - 0.01 ANGSTROMS.
C
C      11) CALCULATE NEW VALUE OF TDIST USING PARABOLA METHOD.  IF
C          TDIST < 0.0005, FINISHED!  IF NOT REPEAT STEPS 9-11.
C
C      ON INPUT:
C         GEO = COORDINATES (IN COMMON)
C         NVAR = # OF DEGREES OF FREEDOM (IN COMMON)
C
C      ON OUTPUT
C         GEO = NEW COORDINATES
C         ENERGY = ENERGY OF SYSTEM
C
C      SIMP3 IS A SUBROUTINE THAT CALCULATES SINGLE POINT ENERGIES
C      AT THREE POINTS
C
C      METHOD DEVELOPED AND IMPLEMENTED BY DJG 11/96
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      COMMON /MESAGE/ IFLEP,ISCF
     1       /MLKSTI/ NUMAT,NAT(NUMATM),NFIRST(3*NUMATM+4),NCLOSE,NOPEN
     2               ,IDUMMY
     3       /GEOVAR/ XPARAM(MAXPAR),NVAR,LOC(2,MAXPAR),IDUMY
     8       /GEOM  / GEO(3,NUMATM)            
      LOGICAL KNOW1, FAIL, FAIL2
      SAVE
C     INITIAL SETUP
      KNOW1=.FALSE.
      IF (IGCOMP.NE.0) THEN
         GOLD=FIGCOM
C  GRATIO INCREASES LOOSE GRADIENT TOLERENCES DEPENDING ON REQUESTED
C  FINAL TOLERENCE
         GRATIO=FIGCOM/0.45D0
      ELSE
         IGCOMP=1
         GOLD=0.45D0
         GRATIO=1.0
      ENDIF
      FIGCOM=3.0*GRATIO
C  BTOL IS THE FINAL TOLERENCE ON BOND LENGTH
      BTOL=0.0005D0
      IF (IBONDT.NE.0) BTOL=FIBOND
C  NBOND IS THE # OF THE ATOM INVOLVED IN THE TS
      NBOND=IISIMP
      IF (NBOND.LT.0) THEN
         NBOND=-NBOND
         ASIGN=-1.0D0
      ELSE
         ASIGN=1.0D0
      ENDIF
      ORGVAL=GEO(1,NBOND)
C      IF (NBOND.GT.NUMAT) THEN
C         IWHERE=2001
C         ISTOP=1
C         WRITE(JOUT,10)
C10       FORMAT('WARNING : THE ATOM NUMBER INDICATED BY SIMPT= IS', 
C     1          'GREATER THEN THE # OF ATOMS!!!!')
C         GOTO 9999
C      ENDIF
C  END OF INITIAL SETUP
C  THE THREE VALUES OF BOND LENGTH FOR SINGLE POINTS ARE STORED IN
C  BOND1, BOND2, AND BOND3
      BOND1=GEO(1,NBOND)
      BOND2=BOND1+ASIGN*0.05D0
      BOND3=BOND1+ASIGN*0.2D0
C  THREE SINGLE POINT ENERGIES ARE STORED IN ENG1, 2 AND 3
C  KNOW1=.TRUE. MEANS WE ALREADY KNOW THE ENERGY OF THE FIRST POINT
      CALL SIMP3(BOND2,BOND3,ENG1,ENG2,ENG3,NBOND,KNOW1,FAIL)
      IF (FAIL) GOTO 9999
      CALL SIMPP(BOND1, BOND2, BOND3, ENG1, ENG2, ENG3, TDIST, FAIL2)
      IF (FAIL2) THEN
         WRITE(JOUT,9200)
C  IF TDIST IS VERY SMALL, WE CHOSE ORIGINAL POINT AS THE HIGHEST ENERGY
C  POINT, WE NEED TO MOVE SLIGHTLY AND CHANGE THE SEARCH DIRECTION
         IF (ABS(TDIST).LT.0.001) TDIST=-ASIGN*0.05
      ENDIF
50    CONTINUE
      GEO(1,NBOND)=GEO(1,NBOND)+0.5*TDIST
      IF ((abs(GEO(1,NBOND)-ORGVAL)-20.0D0).GT.0.0D0) THEN
         WRITE(JOUT,9300)
         IFLEP=9
         GOTO 9999
      ENDIF
      WRITE(JOUT,9000) FIGCOM,GEO(1,NBOND),TDIST
      CALL TRUSTE(XPARAM,ENG1,NVAR)
      KNOW1=.TRUE.
      BOND1=GEO(1,NBOND)
      BOND2=BOND1+TDIST*0.5D0
      BOND3=BOND1+TDIST
      TDISTO=TDIST
      CALL SIMP3(BOND2,BOND3,ENG1,ENG2,ENG3,NBOND,KNOW1,FAIL)
      IF (FAIL) GOTO 9999
      CALL SIMPP(BOND1, BOND2, BOND3, ENG1, ENG2, ENG3, TDIST, FAIL2)
      IF (FAIL2) THEN
         WRITE(JOUT,9200)
         IF (ABS(TDIST).LT.0.001) TDIST=-ASIGN*TDISTO
      ENDIF
      RATIO=ABS(TDIST/TDISTO)
      IF (RATIO.GT.0.65) GOTO 50
      FIGCOM=1.0*GRATIO
100   CONTINUE
      IF (ABS(TDIST).LT.0.01) GOTO 150 
      GEO(1,NBOND)=GEO(1,NBOND)+TDIST
      WRITE(JOUT,9000) FIGCOM,GEO(1,NBOND),TDIST
      CALL TRUSTE(XPARAM,ENG1,NVAR)
      KNOW1=.TRUE.
      BOND1=GEO(1,NBOND)
      BOND2=BOND1+TDIST*0.5D0
      BOND3=BOND1-TDIST*0.5D0
      CALL SIMP3(BOND2,BOND3,ENG1,ENG2,ENG3,NBOND,KNOW1,FAIL)
      IF (FAIL) GOTO 9999
      CALL SIMPP(BOND1, BOND2, BOND3, ENG1, ENG2, ENG3, TDIST, FAIL2)
      IF (FAIL2) THEN
         WRITE(JOUT,9200)
         IF (ABS(TDIST).LT.0.001) TDIST=0.001
      ENDIF
      IF (ABS(TDIST).GT.0.01) GOTO 100
      FIGCOM=GOLD*GRATIO
150   CONTINUE
      GEO(1,NBOND)=GEO(1,NBOND)+TDIST
      WRITE(JOUT,9000) FIGCOM,GEO(1,NBOND),TDIST
      CALL TRUSTE(XPARAM,ENG1,NVAR)
      KNOW1=.TRUE.
      BOND1=GEO(1,NBOND)
      BOND2=BOND1+0.01
      BOND3=BOND1-0.01
      CALL SIMP3(BOND2,BOND3,ENG1,ENG2,ENG3,NBOND,KNOW1,FAIL)
      IF (FAIL) GOTO 9999
      CALL SIMPP(BOND1, BOND2, BOND3, ENG1, ENG2, ENG3, TDIST, FAIL2)
      IF (FAIL2) THEN
         WRITE(JOUT,9200)
         IF (ABS(TDIST).LT.0.001) TDIST=0.001
      ENDIF
      IF (ABS(TDIST).GT.BTOL) GOTO 150
      WRITE(JOUT,9100) BTOL
9000  FORMAT(/,5X,'DOING OPTIMIZATION WITH GRADIENT TOLERENCE = ',
     1       F6.3,/,5X,'CURRENT VALUE OF BOND LENGTH IS ',F9.6,
     2       ' ANGSTROMS',/,5X,'PREVIOUS ESTIMATE OF DISTANCE TO '
     3       'TS WAS ',F9.6,' ANGSTROMS',/)
9100  FORMAT(5X,'FINAL TRANSITION STATE FOUND TO WITHIN ',F8.6,
     1          ' ANGSTROMS')
9200  FORMAT(5X,'BELOW INFLECTION POINT PARABOLIC SEARCH FAILED',
     1          ' USING LINEAR STEP.')
9300  FORMAT(5X,'SIMPT HAS WANDERED INTO THE WEEDS, TRANSITION STATE', 
     1          'NOT FOUND')
9999  CONTINUE
      ENERGY=ENG1
      RETURN
      END
      SUBROUTINE SIMP3(BOND2,BOND3,ENG1,ENG2,ENG3,NBOND,KNOW1,FAIL)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      INCLUDE 'SIZES.i'
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     SIMP3 CALCULATES THE ENERGY AT THREE SPECIFIED POINTS
C
C     THE TWO NEW VALUES OF BOND LENGTH FOR SINGLE POINTS ARE STORED IN
C     BOND2, AND BOND3 (GEO(1,NBOND) IS ALREADY AT 1ST VALUE)
C
C     THE THREE VALUES OF ENERGY FOR SINGLE POINTS ARE RETURNED IN
C     ENG1, ENG2, AND ENG3
C
C     KNOW1=TRUE, DO NOT CALCULATE FIRST POINT
C
C     NBOND=# OF GEOMETRY VALUE TO BE ALTERED
C  
C     FAIL=TRUE IF ENERGY CALCULATION FAILS
C
C     FOR CALLS TO COMPFG -
C       GRAD=DUMMY VARIABLE NOT USED
C       GEO=GEOMETRY OF MOLECULE
C       ENERGY=ENERGY OF SYSTEM
C       LGRAD=IF TO CALCULATE GRADIENTS
C       FAIL=IF ENERGY CALC IN COMPFG WORKED
C
C     DESIGNED AND IMPLEMENTED BY DJG11/96
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      COMMON /MESAGE/ IFLEP,ISCF
     1       /GEOVAR/ XPARAM(MAXPAR),NVAR,LOC(2,MAXPAR),IDUMY
     2       /GEOM  / GEO(3,NUMATM)
      DIMENSION GRAD(MAXPAR)
      LOGICAL FAIL,LGRAD,KNOW1
      LGRAD=.FALSE.
      FAIL=.FALSE.
C     IF (.NOT.KNOW1) CALL COMPFG(XPARAM,ENG1,FAIL,GRAD,LGRAD)
      IF (.NOT.KNOW1) CALL TRUSTE(XPARAM,ENG1,NVAR)
      IF (FAIL) GOTO 9999
      GOLD=GEO(1,NBOND)
      GEO(1,NBOND)=BOND2
C     CALL COMPFG(XPARAM,ENG2,FAIL,GRAD,LGRAD)
      CALL TRUSTE(XPARAM,ENG2,NVAR)
      IF (FAIL) GOTO 9999
      GEO(1,NBOND)=BOND3
C     CALL COMPFG(XPARAM,ENG3,FAIL,GRAD,LGRAD)
      CALL TRUSTE(XPARAM,ENG3,NVAR)
      IF (FAIL) GOTO 9999
      GEO(1,NBOND)=GOLD
9999  CONTINUE
      RETURN
      END
      SUBROUTINE SIMPP(BOND1,BOND2,BOND3,ENG1,ENG2,ENG3,TDIST,FAIL)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     SIMPP CALCULATES THE MAXIMUM POINT OF A PARABOLA WHICH IS FORMED
C     THE POINTS (BONDX,ENGX), AND THEN CALCULATES THE DISTANCE FROM
C     THAT POINT TO THE POINT BOND1 (DISTANCE IN THE BOND1 DIMENSION ONLY.
C
C     PARABOLA IS OF THE FORM :
C
C     ENGX = A*BONDX^2 + B*BONDX + C
C
C     TO FIND MAXIMUM, FIND WHERE DERIVATIVE EQUALS 0
C     DERIVATIVE : 0 = 2*A*BONDX + B
C
C     DESIGNED AND IMPLEMENTED BY DJG11/96
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      LOGICAL FAIL
      Z1=BOND1*BOND1
      Z2=BOND2*BOND2
      Z3=BOND3*BOND3
      Q=(Z3-Z1)/(Z2-Z1)
      B=(ENG3+(ENG1-ENG2)*Q-ENG1)/(BOND3+(BOND1-BOND2)*Q-BOND1)
      A=(ENG2+B*(BOND1-BOND2)-ENG1)/(Z2-Z1)
      C=ENG1-A*Z1-B*BOND1
      APEX=-B/(2*A)
C  A > 0 MEANS WE ARE BELOW THE INFLECTION POINT, USING PARABOLA WILL
C  LEAD TO MINIMUM ON CURVE, NOT MAXIMUM
C
C  APEX < 0 MEANS WE PROBABLY CROSSED OVER AN INFLECTION POINT, AND HAVE
C  A NEARLY LINEAR FUNCTION
      FAIL=(A.GT.0.0D0).OR.(APEX.LT.0.0D0)
      IF (FAIL) THEN
         IF (ENG1.GT.ENG2) THEN
            IF (ENG1.GT.ENG3) THEN
               APEX=BOND1
            ELSE
               APEX=BOND3
            ENDIF
         ELSE
            IF (ENG2.GT.ENG3) THEN
               APEX=BOND2
            ELSE
               APEX=BOND3
            ENDIF
         ENDIF
      ENDIF
      TDIST=APEX-BOND1
      IF (TDIST.GT.0.2D0) TDIST=0.2D0
      IF (TDIST.LT.-0.2D0) TDIST=-0.2D0
      write(6,*) 'parabola data'
      write(6,*) bond1, bond2, bond3
      write(6,*) eng1, eng2, eng3
      write(6,*) a, b, c
      write(6,*) apex
      write(6,*)
      RETURN
      END
      


    



